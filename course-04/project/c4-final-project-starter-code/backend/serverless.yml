service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TODO_TABLE: tblTodos-${self:provider.stage}
    INDEX_NAME: tblTodo-Index-${self:provider.stage}

functions:

  # Auth:
  #   handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource:
        - "Fn::GetAtt": [ TodosTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.INDEX_NAME}


  # # TODO: Configure this function
  # GetTodos:
  #   handler: src/lambda/http/getTodos.handler
  #   events:
  #     -http:
  #       method: get
  #       path: todos

  # CreateTodo:
  #   handler: src/lambda/http/createTodo.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos

  # # TODO: Configure this function
  # UpdateTodo:
  #   handler: src/lambda/http/updateTodo.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos/{todoId}/attachment

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODO_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        LocalSecondaryIndexes:
        - IndexName: ${self:provider.environment.INDEX_NAME}
          KeySchema:
            - AttributeName: todoId
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL





    